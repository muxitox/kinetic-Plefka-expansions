J normalization

        self.J = self.rng.random((self.size, self.size)) / self.size


Seed: [3813]. Original size: 6. Visible units: 3. O. Simulation steps: 500. F. Simulation steps: 2000. eta: 0.01. max_reps: 6500 
Final MSE m 0.0010263333333333329 C 0.0010416503761111115 D 0.0023920091538888895

%%%%%%%%%%%


Seed: [3813]. Original size: 8. Visible units: 5. O. Simulation steps: 500. F. Simulation steps: 2000. eta: 0.01. max_reps: 6500 
Final MSE m 0.0004768666666666663 C 0.04034916578115999 D 0.0016069793678266664

%%%%%%%%%

Seed: [3813]. Original size: 10. Visible units: 5. O. Simulation steps: 500. F. Simulation steps: 2000. eta: 0.01. max_reps: 6500 
Final MSE m 0.00048213333333333336 C 0.0007174025398133335 D 0.0017750904331466668

%%%%%%%%


Seed: [3813]. Original size: 10. Visible units: 6. O. Simulation steps: 500. F. Simulation steps: 2000. eta: 0.01. max_reps: 6500 
Final MSE m 0.00040950000000000014 C 0.0007054515686388889 D 0.0014696139482685184

%%%%%%

Seed: [3813]. Original size: 10. Visible units: 7. O. Simulation steps: 500. F. Simulation steps: 2000. eta: 0.01. max_reps: 6500 
Final MSE m 0.00034090476190476205 C 0.028253601676659867 D 0.002124664622238095